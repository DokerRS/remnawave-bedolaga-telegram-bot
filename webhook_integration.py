"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è webhook —Å–µ—Ä–≤–µ—Ä–∞ YooKassa –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
"""

import asyncio
import logging
import json
from aiohttp import web, ClientSession
from yookassa_service import YooKassaService
from database import Database
from yookassa_handlers import process_yookassa_webhook

logger = logging.getLogger(__name__)

class YooKassaWebhookServer:
    """Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è YooKassa"""
    
    def __init__(self, config, db, bot=None):
        self.config = config
        self.db = db
        self.bot = bot
        self.app = None
        self.runner = None
        self.site = None
        self.is_running = False
        
    async def start(self, host='0.0.0.0', port=8000):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç webhook —Å–µ—Ä–≤–µ—Ä"""
        try:
            if not self.config.YOOKASSA_ENABLED:
                logger.info("‚ö†Ô∏è YooKassa webhook server disabled (YOOKASSA_ENABLED=False)")
                return
            
            if not self.config.YOOKASSA_SHOP_ID or not self.config.YOOKASSA_SECRET_KEY:
                logger.warning("‚ö†Ô∏è YooKassa webhook server disabled (missing credentials)")
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.app = web.Application()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
            self.app.router.add_post('/webhook/yookassa', self.yookassa_webhook_handler)
            self.app.router.add_get('/health', self.health_check)
            self.app.router.add_get('/webhook/yookassa/status', self.webhook_status)
            
            # –°–æ–∑–¥–∞–µ–º runner
            self.runner = web.AppRunner(self.app)
            await self.runner.setup()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            self.site = web.TCPSite(self.runner, host, port)
            await self.site.start()
            
            self.is_running = True
            logger.info(f"‚úÖ YooKassa webhook server started at http://{host}:{port}")
            logger.info(f"üîó Webhook endpoint: http://{host}:{port}/webhook/yookassa")
            logger.info(f"üìä Health check: http://{host}:{port}/health")
            logger.info(f"üìà Status: http://{host}:{port}/webhook/yookassa/status")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to start YooKassa webhook server: {e}")
            self.is_running = False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook —Å–µ—Ä–≤–µ—Ä"""
        try:
            if self.site:
                await self.site.stop()
                logger.info("‚úÖ YooKassa webhook server site stopped")
            
            if self.runner:
                await self.runner.cleanup()
                logger.info("‚úÖ YooKassa webhook server runner cleaned up")
            
            self.is_running = False
            logger.info("‚úÖ YooKassa webhook server stopped")
            
        except Exception as e:
            logger.error(f"‚ùå Error stopping YooKassa webhook server: {e}")
    
    async def yookassa_webhook_handler(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤ –æ—Ç YooKassa"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            body = await request.text()
            signature = request.headers.get('Signature', request.headers.get('X-YooKassa-Signature', ''))
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            all_headers = dict(request.headers)
            logger.info(f"üì• Received YooKassa webhook:")
            logger.info(f"üì• Body: {body[:200]}...")
            logger.info(f"üîê Signature header: {signature}")
            logger.info(f"üîê All headers: {all_headers}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å YooKassa
            yookassa_service = YooKassaService(
                shop_id=self.config.YOOKASSA_SHOP_ID,
                secret_key=self.config.YOOKASSA_SECRET_KEY
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            if getattr(self.config, 'YOOKASSA_SKIP_SIGNATURE_VERIFICATION', False):
                logger.warning("‚ö†Ô∏è Skipping webhook signature verification (YOOKASSA_SKIP_SIGNATURE_VERIFICATION=True)")
            elif not yookassa_service.verify_webhook_signature(body, signature):
                logger.error("‚ùå Invalid YooKassa webhook signature")
                # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.warning("‚ö†Ô∏è Temporarily skipping signature verification for debugging")
                # return web.Response(status=400, text="Invalid signature")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ webhook'–∞
            webhook_data = yookassa_service.parse_webhook_data(body)
            if not webhook_data:
                logger.error("‚ùå Failed to parse YooKassa webhook data")
                return web.Response(status=400, text="Invalid webhook data")
            
            logger.info(f"‚úÖ Parsed webhook data: {webhook_data}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            success = await process_yookassa_webhook(webhook_data, self.db, self.bot)
            
            if success:
                logger.info(f"‚úÖ YooKassa webhook processed successfully: {webhook_data.get('type')}")
                return web.Response(status=200, text="OK")
            else:
                logger.error(f"‚ùå Failed to process YooKassa webhook: {webhook_data.get('type')}")
                return web.Response(status=500, text="Processing failed")
            
        except Exception as e:
            logger.error(f"‚ùå Error processing YooKassa webhook: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return web.Response(status=500, text="Internal error")
    
    async def health_check(self, request):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è webhook —Å–µ—Ä–≤–µ—Ä–∞"""
        return web.json_response({
            'status': 'healthy',
            'service': 'yookassa_webhook',
            'running': self.is_running,
            'timestamp': asyncio.get_event_loop().time()
        })
    
    async def webhook_status(self, request):
        """–°—Ç–∞—Ç—É—Å webhook —Å–µ—Ä–≤–µ—Ä–∞"""
        return web.json_response({
            'service': 'yookassa_webhook',
            'status': 'running' if self.is_running else 'stopped',
            'endpoints': {
                'webhook': '/webhook/yookassa',
                'health': '/health',
                'status': '/webhook/yookassa/status'
            },
            'config': {
                'enabled': self.config.YOOKASSA_ENABLED,
                'shop_id_set': bool(self.config.YOOKASSA_SHOP_ID),
                'secret_key_set': bool(self.config.YOOKASSA_SECRET_KEY)
            },
            'timestamp': asyncio.get_event_loop().time()
        })
    
    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å webhook —Å–µ—Ä–≤–µ—Ä–∞"""
        return {
            'is_running': self.is_running,
            'service': 'yookassa_webhook',
            'endpoints': {
                'webhook': '/webhook/yookassa',
                'health': '/health',
                'status': '/webhook/yookassa/status'
            }
        }
