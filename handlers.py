from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
import logging
import secrets
from typing import Optional, Dict, Any

from database import Database, User, ReferralProgram, ServiceRule
from remnawave_api import RemnaWaveAPI
from keyboards import *
from translations import t
from utils import *
from config import *
from stars_handlers import stars_router
import base64
import json
from referral_utils import (
    process_referral_rewards, 
    create_referral_from_start_param, 
    create_referral_from_promocode,
    generate_referral_link
)
from lucky_game import lucky_game_router, LuckyGameStates

logger = logging.getLogger(__name__)

class BotStates(StatesGroup):
    waiting_language = State()
    waiting_amount = State()
    waiting_promocode = State()
    waiting_topup_amount = State()
    admin_create_sub_name = State()
    admin_create_sub_desc = State()
    admin_create_sub_price = State()
    admin_create_sub_days = State()
    admin_create_sub_traffic = State()
    admin_create_sub_squad = State()
    admin_create_sub_squad_select = State()
    admin_edit_sub_value = State()
    admin_add_balance_user = State()
    admin_add_balance_amount = State()
    admin_payment_history_page = State()
    admin_create_promo_code = State()
    admin_create_promo_discount = State()
    admin_create_promo_limit = State()
    admin_edit_promo_value = State()
    admin_create_promo_expiry = State()
    admin_send_message_user = State()
    admin_send_message_text = State()
    admin_broadcast_text = State()
    admin_search_user_uuid = State()
    admin_search_user_any = State()
    admin_edit_user_expiry = State()
    admin_edit_user_traffic = State()
    admin_test_monitor_user = State()
    admin_sync_single_user = State()
    admin_debug_user_structure = State()
    admin_rename_plans_confirm = State()
    waiting_number_choice = State()
    waiting_rule_title = State()
    waiting_rule_content = State()
    waiting_rule_order = State()
    waiting_rule_edit_title = State()
    waiting_rule_edit_content = State()
    waiting_rule_edit_order = State()


router = Router()

@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext, db: Database, **kwargs):
    user = kwargs.get('user')
    config = kwargs.get('config')
    
    if not user:
        logger.error(f"User is None for telegram_id {message.from_user.id}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    if message.text and len(message.text.split()) > 1:
        start_param = message.text.split()[1]
        
        if start_param.startswith("ref_"):
            try:
                referrer_id = int(start_param.replace("ref_", ""))
                
                existing_reverse_referral = await db.get_referral_by_referred_id(referrer_id)
                if existing_reverse_referral and existing_reverse_referral.referrer_id == user.telegram_id:
                    await message.answer(
                        "‚ùå –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏!\n\n"
                        "–í–∑–∞–∏–º–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è."
                    )
                else:
                    bot = kwargs.get('bot')
                    success = await create_referral_from_start_param(user.telegram_id, start_param, db, bot)
                    
                    if success:
                        threshold = config.REFERRAL_THRESHOLD if config else 300.0
                        referred_bonus = config.REFERRAL_REFERRED_BONUS if config else 150.0
    
                        await message.answer(
                            "üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                            f"–í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! –ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {threshold:.0f}‚ÇΩ "
                            f"–≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å {referred_bonus:.0f}‚ÇΩ!"
                        )
                    elif not success:
                        existing_referral = await db.get_referral_by_referred_id(user.telegram_id)
                        if existing_referral:
                            await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Ä–∞–Ω–µ–µ.")
            except (ValueError, TypeError):
                pass
    
    await state.clear()
    
    if not user.language or user.language == 'ru' or user.language == '':
        if user.language == '' or user.language is None:
            await message.answer(
                t('select_language'),
                reply_markup=language_keyboard()
            )
            await state.set_state(BotStates.waiting_language)
            return
        else:
            await show_main_menu(message, user.language, user.is_admin, user.telegram_id, db, config)
    else:
        await show_main_menu(message, user.language, user.is_admin, user.telegram_id, db, config)

@router.callback_query(F.data.startswith("lang_"))
async def language_callback(callback: CallbackQuery, state: FSMContext, db: Database, **kwargs):
    user = kwargs.get('user')
    config = kwargs.get('config')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    lang = callback.data.split("_")[1]
    
    try:
        user.language = lang
        await db.update_user(user)
        logger.info(f"Updated language for user {user.telegram_id} to {lang}")
        
        current_state = await state.get_state()
        is_initial_setup = current_state == BotStates.waiting_language.state
        
        if is_initial_setup:
            await callback.message.edit_text(
                t('language_selected', lang),
                reply_markup=None
            )
            await state.clear()
            await show_main_menu(callback.message, lang, user.is_admin, user.telegram_id, db, config)
        else:
            show_trial = False
            if config and config.TRIAL_ENABLED and db:
                try:
                    has_used = await db.has_used_trial(user.telegram_id)
                    show_trial = not has_used
                except Exception as e:
                    logger.error(f"Error checking trial availability: {e}")
            
            await callback.message.edit_text(
                t('language_changed', lang),
                reply_markup=main_menu_keyboard(lang, user.is_admin, show_trial)
            )
        
    except Exception as e:
        logger.error(f"Error updating user language: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞")

async def show_main_menu(message: Message, lang: str, is_admin: bool = False, user_id: int = None, db: Database = None, config: Config = None):
    try:
        show_trial = False
        show_lucky_game = True 
        
        if config and config.TRIAL_ENABLED and user_id and db:
            has_used = await db.has_used_trial(user_id)
            show_trial = not has_used
        
        if config:
            show_lucky_game = getattr(config, 'LUCKY_GAME_ENABLED', True)
        
        await message.answer(
            t('main_menu', lang),
            reply_markup=main_menu_keyboard(lang, is_admin, show_trial, show_lucky_game)
        )
    except Exception as e:
        logger.error(f"Error showing main menu: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é")

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery, **kwargs):
    user = kwargs.get('user')
    db = kwargs.get('db')
    config = kwargs.get('config')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    show_trial = False
    
    if config and config.TRIAL_ENABLED and db:
        try:
            has_used = await db.has_used_trial(user.telegram_id)
            show_trial = not has_used
        except Exception as e:
            logger.error(f"Error checking trial availability: {e}")
    
    await callback.message.edit_text(
        t('main_menu', user.language),
        reply_markup=main_menu_keyboard(user.language, user.is_admin, show_trial)
    )

@router.callback_query(F.data == "trial_subscription")
async def trial_subscription_callback(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    config = kwargs.get('config')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    if not config or not config.TRIAL_ENABLED:
        await callback.answer(t('trial_not_available', user.language))
        return
    
    try:
        has_used = await db.has_used_trial(user.telegram_id)
        if has_used:
            await callback.answer(t('trial_already_used', user.language))
            return
        
        text = t('trial_info', user.language,
            days=config.TRIAL_DURATION_DAYS,
            traffic=config.TRIAL_TRAFFIC_GB
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=trial_subscription_keyboard(user.language)
        )
    except Exception as e:
        logger.error(f"Error showing trial info: {e}")
        await callback.answer(t('error_occurred', user.language))

@router.callback_query(F.data == "confirm_trial")
async def confirm_trial_callback(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    api = kwargs.get('api')
    config = kwargs.get('config')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    if not config or not config.TRIAL_ENABLED:
        await callback.answer(t('trial_not_available', user.language))
        return
    
    try:
        has_used = await db.has_used_trial(user.telegram_id)
        if has_used:
            await callback.answer(t('trial_already_used', user.language))
            return
        
        if not api:
            logger.error("API not available in kwargs")
            await callback.message.edit_text(
                t('trial_error', user.language),
                reply_markup=main_menu_keyboard(user.language, user.is_admin)
            )
            return

        username = generate_username()
        password = generate_password()
        
        logger.info(f"Creating trial subscription for user {user.telegram_id}")
        
        remna_user = await api.create_user(
            username=username,
            password=password,
            traffic_limit=config.TRIAL_TRAFFIC_GB * 1024 * 1024 * 1024,
            expiry_time=calculate_expiry_date(config.TRIAL_DURATION_DAYS),
            telegram_id=user.telegram_id,
            activeInternalSquads=[config.TRIAL_SQUAD_UUID]
        )

        if remna_user:
            if 'data' in remna_user and 'uuid' in remna_user['data']:
                user_uuid = remna_user['data']['uuid']
                short_uuid = remna_user['data'].get('shortUuid')
            elif 'response' in remna_user and 'uuid' in remna_user['response']:
                user_uuid = remna_user['response']['uuid']
                short_uuid = remna_user['response'].get('shortUuid')
            else:
                logger.error(f"Invalid API response structure: {remna_user}")
                await callback.message.edit_text(
                    t('trial_error', user.language),
                    reply_markup=main_menu_keyboard(user.language, user.is_admin)
                )
                return

            if user_uuid:
                if not short_uuid:
                    user_details = await api.get_user_by_uuid(user_uuid)
                    if user_details and 'shortUuid' in user_details:
                        short_uuid = user_details['shortUuid']
                
                if not short_uuid:
                    logger.error(f"Failed to get shortUuid for trial user")
                    await callback.message.edit_text(
                        t('trial_error', user.language),
                        reply_markup=main_menu_keyboard(user.language, user.is_admin)
                    )
                    return
                    
                logger.info(f"Created trial user with UUID: {user_uuid}, shortUuid: {short_uuid}")
            else:
                logger.error("Failed to create trial user in RemnaWave")
                await callback.message.edit_text(
                    t('trial_error', user.language),
                    reply_markup=main_menu_keyboard(user.language, user.is_admin)
                )
                return
        else:
            logger.error("Failed to create trial user in RemnaWave API")
            await callback.message.edit_text(
                t('trial_error', user.language),
                reply_markup=main_menu_keyboard(user.language, user.is_admin)
            )
            return

        trial_subscription = await db.create_subscription(
            name=f"Trial_{user.telegram_id}_{int(datetime.utcnow().timestamp())}",
            description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
            price=0,
            duration_days=config.TRIAL_DURATION_DAYS,
            traffic_limit_gb=config.TRIAL_TRAFFIC_GB,
            squad_uuid=config.TRIAL_SQUAD_UUID
        )
        
        trial_subscription.is_trial = True
        trial_subscription.is_active = False
        await db.update_subscription(trial_subscription)

        expires_at = datetime.utcnow() + timedelta(days=config.TRIAL_DURATION_DAYS)
        
        await db.create_user_subscription(
            user_id=user.telegram_id,
            subscription_id=trial_subscription.id,
            short_uuid=short_uuid,
            expires_at=expires_at
        )
        
        await db.mark_trial_used(user.telegram_id)
        
        await db.create_payment(
            user_id=user.telegram_id,
            amount=0,
            payment_type='trial',
            description='–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏',
            status='completed'
        )
        
        success_text = t('trial_success', user.language)
        
        try:
            subscription_url = await api.get_subscription_url(short_uuid)
            if subscription_url:
                success_text += f"\n\nüîó <a href='{subscription_url}'>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</a>"
                success_text += f"\nüì± –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –≤–∞—à–µ VPN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
        except Exception as e:
            logger.warning(f"Could not get trial subscription URL: {e}")
        
        await callback.message.edit_text(
            success_text,
            reply_markup=main_menu_keyboard(user.language, user.is_admin),
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
        log_user_action(user.telegram_id, "trial_subscription_activated", "Free trial")
        
    except Exception as e:
        logger.error(f"Error creating trial subscription: {e}")
        await callback.message.edit_text(
            t('trial_error', user.language),
            reply_markup=main_menu_keyboard(user.language, user.is_admin)
        )

@router.callback_query(F.data == "change_language")
async def change_language_callback(callback: CallbackQuery, **kwargs):
    user = kwargs.get('user')
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    await callback.message.edit_text(
        t('select_language'),
        reply_markup=language_keyboard()
    )

@router.callback_query(F.data == "balance")
async def balance_callback(callback: CallbackQuery, **kwargs):
    user = kwargs.get('user')
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    text = t('your_balance', user.language, balance=user.balance)
    await callback.message.edit_text(
        text,
        reply_markup=balance_keyboard(user.language)
    )

@router.callback_query(F.data == "topup_balance")
async def topup_balance_callback(callback: CallbackQuery, **kwargs):
    user = kwargs.get('user')
    config = kwargs.get('config')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"üîç Debug: YOOKASSA_ENABLED={getattr(config, 'YOOKASSA_ENABLED', 'N/A') if config else 'N/A'}")
    logger.info(f"üîç Debug: YOOKASSA_SHOP_ID={getattr(config, 'YOOKASSA_SHOP_ID', 'N/A') if config else 'N/A'}")
    logger.info(f"üîç Debug: YOOKASSA_SECRET_KEY={'SET' if config and config.YOOKASSA_SECRET_KEY else 'NOT SET' if config else 'N/A'}")
    
    stars_enabled = config and config.STARS_ENABLED and config.STARS_RATES
    
    text = t('topup_balance', user.language)
    
    if stars_enabled:
        text += "\n\n‚≠ê **–ù–æ–≤–∏–Ω–∫–∞!** –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ Telegram Stars!"
        text += "\nüíé –ë—ã—Å—Ç—Ä–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ, –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π!"
    
    await callback.message.edit_text(
        text,
        reply_markup=topup_keyboard(user.language, config),
        parse_mode='Markdown'
    )

@router.callback_query(F.data == "topup_card")
async def topup_card_callback(callback: CallbackQuery, **kwargs):
    user = kwargs.get('user')
    config = kwargs.get('config')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    support_username = config.SUPPORT_USERNAME if config else 'support'
    text = t('payment_card_info', user.language, support=support_username)
    await callback.message.edit_text(
        text,
        reply_markup=back_keyboard("topup_balance", user.language)
    )

@router.callback_query(F.data == "topup_support")
async def topup_support_callback(callback: CallbackQuery, state: FSMContext, **kwargs):
    user = kwargs.get('user')
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    await callback.message.edit_text(
        t('enter_amount', user.language),
        reply_markup=cancel_keyboard(user.language)
    )
    await state.set_state(BotStates.waiting_amount)

@router.message(StateFilter(BotStates.waiting_amount))
async def handle_amount(message: Message, state: FSMContext, db: Database, **kwargs):
    user = kwargs.get('user')
    config = kwargs.get('config')
    
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    is_valid, amount = is_valid_amount(message.text)
    
    if not is_valid:
        await message.answer(t('invalid_amount', user.language))
        return
    
    try:
        payment = await db.create_payment(
            user_id=user.telegram_id,
            amount=amount,
            payment_type='topup', 
            description=f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} —Ä—É–±.'
        )
        
        support_username = config.SUPPORT_USERNAME if config else 'support'
        
        if config and config.ADMIN_IDS:
            admin_text = f"üí∞ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!\n\n"
            admin_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name or 'N/A'} (@{user.username or 'N/A'})\n"
            admin_text += f"üÜî ID: {user.telegram_id}\n"
            admin_text += f"üíµ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
            admin_text += f"üìù ID –ø–ª–∞—Ç–µ–∂–∞: {payment.id}"
            
            from aiogram import Bot
            bot = kwargs.get('bot')
            if bot:
                for admin_id in config.ADMIN_IDS:
                    try:
                        await bot.send_message(
                            admin_id, 
                            admin_text,
                            reply_markup=admin_payment_keyboard(payment.id, user.language)
                        )
                    except Exception as e:
                        logger.error(f"Failed to notify admin {admin_id}: {e}")
        
        text = t('payment_created', user.language, support=support_username)
        await message.answer(
            text,
            reply_markup=main_menu_keyboard(user.language, user.is_admin)
        )
        await state.clear()
    except Exception as e:
        logger.error(f"Error creating payment: {e}")
        await message.answer(
            t('error_occurred', user.language),
            reply_markup=main_menu_keyboard(user.language, user.is_admin)
        )
        await state.clear()

@router.callback_query(F.data == "payment_history")
async def payment_history_callback(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        payments = await db.get_user_payments(user.telegram_id)
        
        star_payments = await db.get_user_star_payments(user.telegram_id, 5)
        
        if not payments and not star_payments:
            text = t('no_payments', user.language)
        else:
            text = "üìä " + t('payment_history', user.language) + ":\n\n"
            
            all_payments = []
            
            for payment in payments[:10]:
                all_payments.append({
                    'type': 'regular',
                    'date': payment.created_at,
                    'amount': payment.amount,
                    'description': payment.description,
                    'status': payment.status
                })
            
            for star_payment in star_payments:
                if star_payment.status == 'completed':
                    all_payments.append({
                        'type': 'stars',
                        'date': star_payment.completed_at or star_payment.created_at,
                        'amount': star_payment.rub_amount,
                        'description': f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Stars ({star_payment.stars_amount} ‚≠ê)',
                        'status': star_payment.status,
                        'stars': star_payment.stars_amount
                    })
            
            all_payments.sort(key=lambda x: x['date'], reverse=True)
            
            for payment in all_payments[:10]:
                date_str = format_datetime(payment['date'], user.language)
                status = format_payment_status(payment['status'], user.language)
                
                if payment['type'] == 'stars':
                    text += f"‚≠ê +{payment['amount']:.0f}‚ÇΩ ({payment['stars']} ‚≠ê)\n"
                else:
                    amount_str = f"+{payment['amount']}" if payment['amount'] > 0 else str(payment['amount'])
                    text += f"üí≥ {amount_str}‚ÇΩ\n"
                
                text += f"   üìÖ {date_str} | {status}\n"
                text += f"   üìù {payment['description']}\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=back_keyboard("balance", user.language)
        )
    except Exception as e:
        logger.error(f"Error getting payment history: {e}")
        await callback.answer(t('error_occurred', user.language))

@router.callback_query(F.data == "buy_subscription")
async def buy_subscription_callback(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        subscriptions = await db.get_all_subscriptions(exclude_trial=True)
        
        if not subscriptions:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
                reply_markup=back_keyboard("main_menu", user.language)
            )
            return
        
        sub_list = []
        for sub in subscriptions:
            sub_list.append({
                'id': sub.id,
                'name': sub.name,
                'price': sub.price
            })
        
        await callback.message.edit_text(
            t('buy_subscription', user.language),
            reply_markup=subscriptions_keyboard(sub_list, user.language)
        )
    except Exception as e:
        logger.error(f"Error getting subscriptions: {e}")
        await callback.answer(t('error_occurred', user.language))

@router.callback_query(F.data.startswith("buy_sub_"))
async def buy_subscription_detail(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        sub_id = int(callback.data.split("_")[2])
        subscription = await db.get_subscription_by_id(sub_id)
        
        if not subscription:
            await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        sub_dict = {
            'name': subscription.name,
            'price': subscription.price,
            'duration_days': subscription.duration_days,
            'traffic_limit_gb': subscription.traffic_limit_gb,
            'description': subscription.description or ''
        }
        
        text = format_subscription_info(sub_dict, user.language)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=t('buy_subscription_btn', user.language, price=subscription.price),
                callback_data=f"confirm_buy_{sub_id}"
            )],
            [InlineKeyboardButton(text=t('back', user.language), callback_data="buy_subscription")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error showing subscription detail: {e}")
        await callback.answer(t('error_occurred', user.language))

@router.callback_query(F.data.startswith("confirm_buy_"))
async def confirm_purchase(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    api = kwargs.get('api')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        sub_id = int(callback.data.split("_")[2])
        subscription = await db.get_subscription_by_id(sub_id)
        
        if not subscription:
            await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        if user.balance < subscription.price:
            await callback.answer(t('insufficient_balance', user.language))
            return
        
        if not api:
            logger.error("API not available in kwargs")
            await callback.message.edit_text(
                "‚ùå –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_menu_keyboard(user.language, user.is_admin)
            )
            return

        await callback.answer("‚è≥ –°–æ–∑–¥–∞—é –ø–æ–¥–ø–∏—Å–∫—É...")

        username = generate_username()
        password = generate_password()
        
        logger.info(f"Creating new RemnaWave user for subscription {subscription.name}")
        
        remna_user = await api.create_user(
            username=username,
            password=password,
            traffic_limit=subscription.traffic_limit_gb * 1024 * 1024 * 1024 if subscription.traffic_limit_gb > 0 else 0,
            expiry_time=calculate_expiry_date(subscription.duration_days),
            telegram_id=user.telegram_id,
            activeInternalSquads=[subscription.squad_uuid]
        )

        if remna_user:
            if 'data' in remna_user and 'uuid' in remna_user['data']:
                user_uuid = remna_user['data']['uuid']
                short_uuid = remna_user['data'].get('shortUuid')
            elif 'response' in remna_user and 'uuid' in remna_user['response']:
                user_uuid = remna_user['response']['uuid']
                short_uuid = remna_user['response'].get('shortUuid')
            else:
                logger.error(f"Invalid API response structure: {remna_user}")
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ —Å–ø–∏—Å–∞–Ω—ã.",
                    reply_markup=main_menu_keyboard(user.language, user.is_admin)
                )
                return

            if user_uuid:
                if not short_uuid:
                    try:
                        user_details = await api.get_user_by_uuid(user_uuid)
                        if user_details and 'shortUuid' in user_details:
                            short_uuid = user_details['shortUuid']
                    except Exception as e:
                        logger.error(f"Failed to get shortUuid: {e}")
                
                if not short_uuid:
                    logger.error(f"Failed to get shortUuid for new user")
                    await callback.message.edit_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏. –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ —Å–ø–∏—Å–∞–Ω—ã.",
                        reply_markup=main_menu_keyboard(user.language, user.is_admin)
                    )
                    return
                    
                logger.info(f"Created new user with UUID: {user_uuid}, shortUuid: {short_uuid}")
            else:
                logger.error("Failed to create user in RemnaWave")
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ —Å–ø–∏—Å–∞–Ω—ã.",
                    reply_markup=main_menu_keyboard(user.language, user.is_admin)
                )
                return
        else:
            logger.error("Failed to create user in RemnaWave API")
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ —Å–ø–∏—Å–∞–Ω—ã.",
                reply_markup=main_menu_keyboard(user.language, user.is_admin)
            )
            return

        user.balance -= subscription.price
        await db.update_user(user)

        expires_at = datetime.utcnow() + timedelta(days=subscription.duration_days)
        
        user_subscription = await db.create_user_subscription(
            user_id=user.telegram_id,
            subscription_id=subscription.id,
            short_uuid=short_uuid,
            expires_at=expires_at
        )
        
        if not user.remnawave_uuid:
            user.remnawave_uuid = user_uuid
            await db.update_user(user)
        
        payment = await db.create_payment(
            user_id=user.telegram_id,
            amount=-subscription.price, 
            payment_type='subscription', 
            description=f'–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {subscription.name}',
            status='completed'
        )
        
        
        success_text = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        success_text += f"üìã –ü–æ–¥–ø–∏—Å–∫–∞: {subscription.name}\n"
        success_text += f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {format_date(expires_at, user.language)}\n"
        success_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {subscription.price} —Ä—É–±.\n"
        success_text += f"üí≥ –û—Å—Ç–∞—Ç–æ–∫: {user.balance} —Ä—É–±.\n\n"
        
        try:
            subscription_url = await api.get_subscription_url(short_uuid)
            if subscription_url:
                success_text += f"üîó <a href='{subscription_url}'>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</a>\n\n"
                success_text += "üì± –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –≤–∞—à–µ VPN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
            else:
                success_text += "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'"
        except Exception as e:
            logger.warning(f"Could not get subscription URL: {e}")
            success_text += "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'"
        
        await callback.message.edit_text(
            success_text,
            reply_markup=main_menu_keyboard(user.language, user.is_admin),
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
        log_user_action(user.telegram_id, "subscription_purchased", f"Sub: {subscription.name}")
        
    except Exception as e:
        logger.error(f"Error purchasing subscription: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=main_menu_keyboard(user.language, user.is_admin)
        )

@router.callback_query(F.data == "my_subscriptions")
async def my_subscriptions_callback(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    api = kwargs.get('api')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        user_subs = await db.get_user_subscriptions(user.telegram_id)
        
        if not user_subs:
            await callback.message.edit_text(
                t('no_subscriptions', user.language),
                reply_markup=back_keyboard("main_menu", user.language)
            )
            return
        
        text = t('your_subscriptions', user.language) + "\n\n"
        
        for i, user_sub in enumerate(user_subs, 1):
            subscription = await db.get_subscription_by_id(user_sub.subscription_id)
            if not subscription:
                continue
            
            now = datetime.utcnow()
            if user_sub.expires_at < now:
                status = "‚ùå –ò—Å—Ç–µ–∫–ª–∞"
            elif not user_sub.is_active:
                status = "‚è∏ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞" 
            else:
                days_left = (user_sub.expires_at - now).days
                status = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ ({days_left} –¥–Ω.)"
            
            subscription_name = subscription.name
            if subscription.is_imported or subscription.name == "–°—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞":
                subscription_name += " üîÑ" 
            
            text += f"{i}. {subscription_name}\n"
            text += f"   {status}\n"
            text += f"   –î–æ: {format_date(user_sub.expires_at, user.language)}\n"
            
            if user_sub.short_uuid and api:
                try:
                    subscription_url = await api.get_subscription_url(user_sub.short_uuid)
                    if subscription_url:
                        text += f"   üîó <a href='{subscription_url}'>–ü–æ–¥–∫–ª—é—á–∏—Ç—å</a>\n"
                    else:
                        text += f"   üîó URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                except Exception as e:
                    logger.warning(f"Could not get subscription URL for {user_sub.short_uuid}: {e}")
                    text += f"   üîó URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
            
            text += "\n"
        
        
        sub_list = []
        for user_sub in user_subs:
            subscription = await db.get_subscription_by_id(user_sub.subscription_id)
            if subscription:
                display_name = subscription.name
                if subscription.is_imported or subscription.name == "–°—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞":
                    display_name += " üîÑ"
                
                sub_list.append({
                    'id': user_sub.id,
                    'name': display_name
                })
        
        await callback.message.edit_text(
            text,
            reply_markup=user_subscriptions_keyboard(sub_list, user.language),
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error getting user subscriptions: {e}")
        await callback.answer(t('error_occurred', user.language))

@router.callback_query(F.data.startswith("view_sub_"))
async def view_subscription_detail(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    api = kwargs.get('api')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        user_sub_id = int(callback.data.split("_")[2])
        
        user_subs = await db.get_user_subscriptions(user.telegram_id)
        user_sub = next((sub for sub in user_subs if sub.id == user_sub_id), None)
        
        if not user_sub:
            await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        subscription = await db.get_subscription_by_id(user_sub.subscription_id)
        if not subscription:
            await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        sub_dict = {
            'name': subscription.name,
            'duration_days': subscription.duration_days,
            'traffic_limit_gb': subscription.traffic_limit_gb,
            'description': subscription.description or ''
        }
        
        now = datetime.utcnow()
        days_until_expiry = (user_sub.expires_at - now).days
        
        is_imported = subscription.is_imported or subscription.price == 0
        is_trial = subscription.is_trial
        
        show_extend = (0 <= days_until_expiry <= 3 and 
                      user_sub.is_active and 
                      not is_trial and 
                      not is_imported and 
                      subscription.price > 0) 
        
        text = format_user_subscription_info(user_sub.__dict__, sub_dict, user_sub.expires_at, user.language)
        
        if not is_trial and not is_imported and subscription.price > 0:
            text += f"\n\nüîÑ **–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂:**\n"
            if user_sub.auto_pay_enabled:
                text += f"‚úÖ –í–∫–ª—é—á–µ–Ω (–∑–∞ {user_sub.auto_pay_days_before} –¥–Ω. –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è)\n"
                text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {subscription.price} —Ä—É–±.\n"
                text += f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±."
                
                if user.balance < subscription.price:
                    needed = subscription.price - user.balance
                    text += f"\n‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ –µ—â–µ {needed} —Ä—É–±."
            else:
                text += f"‚ùå –û—Ç–∫–ª—é—á–µ–Ω\n"
                text += f"üí° –í–∫–ª—é—á–∏—Ç–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è"
        
        if user_sub.short_uuid and api:
            try:
                subscription_url = await api.get_subscription_url(user_sub.short_uuid)
                if subscription_url:
                    text += f"\n\nüîó <a href='{subscription_url}'>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</a>"
            except Exception as e:
                logger.warning(f"Could not get subscription URL: {e}")
        
        if is_imported and 0 <= days_until_expiry <= 3:
            text += f"\n\nüìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_until_expiry} –¥–Ω.\n"
            text += f"üõí –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω."
        elif is_trial and 0 <= days_until_expiry <= 3:
            text += f"\n\n‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_until_expiry} –¥–Ω.\n"
            text += f"üõí –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω."
        elif show_extend:
            text += f"\n\n‚ö†Ô∏è {t('subscription_expires_soon', user.language, days=days_until_expiry)}"
        
        await callback.message.edit_text(
            text,
            reply_markup=user_subscription_detail_keyboard(
                user_sub_id, 
                user.language, 
                show_extend, 
                is_imported, 
                is_trial,
                user_sub.auto_pay_enabled 
            ),
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error viewing subscription detail: {e}")
        await callback.answer(t('error_occurred', user.language))

@router.callback_query(F.data.startswith("extend_sub_"))
async def extend_subscription_callback(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        user_sub_id = int(callback.data.split("_")[2])
        
        user_subs = await db.get_user_subscriptions(user.telegram_id)
        user_sub = next((sub for sub in user_subs if sub.id == user_sub_id), None)
        
        if not user_sub:
            await callback.answer(t('subscription_not_found', user.language))
            return
        
        subscription = await db.get_subscription_by_id(user_sub.subscription_id)
        if not subscription:
            await callback.answer(t('subscription_not_found', user.language))
            return
        
        if subscription.is_trial:
            await callback.answer("‚ùå –¢–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–ª–∏—Ç—å")
            return
        
        if subscription.is_imported or subscription.price == 0:
            await callback.message.edit_text(
                "üö´ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–ª–∏—Ç—å\n\n"
                "–≠—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã.\n"
                "–ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"view_sub_{user_sub_id}")]
                ])
            )
            return
        
        if user.balance < subscription.price:
            needed = subscription.price - user.balance
            text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è!\n\n"
            text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {subscription.price} —Ä—É–±.\n"
            text += f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.\n"
            text += f"üí∏ –ù—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å: {needed} —Ä—É–±."
            
            await callback.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_balance")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"view_sub_{user_sub_id}")]
                ])
            )
            return
        
        text = f"üîÑ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
        text += f"üìã –ü–æ–¥–ø–∏—Å–∫–∞: {subscription.name}\n"
        text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {subscription.price} —Ä—É–±.\n"
        text += f"‚è± –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞: {subscription.duration_days} –¥–Ω–µ–π\n"
        text += f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.\n\n"
        text += f"–ü–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è: {user.balance - subscription.price} —Ä—É–±."
        
        await callback.message.edit_text(
            text,
            reply_markup=extend_subscription_keyboard(user_sub_id, user.language)
        )
        
    except Exception as e:
        logger.error(f"Error showing extend subscription: {e}")
        await callback.answer(t('error_occurred', user.language))

@router.callback_query(F.data.startswith("confirm_extend_"))
async def confirm_extend_subscription_callback(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    api = kwargs.get('api')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        user_sub_id = int(callback.data.split("_")[2])
        
        user_subs = await db.get_user_subscriptions(user.telegram_id)
        user_sub = next((sub for sub in user_subs if sub.id == user_sub_id), None)
        
        if not user_sub:
            await callback.answer(t('subscription_not_found', user.language))
            return
        
        subscription = await db.get_subscription_by_id(user_sub.subscription_id)
        if not subscription:
            await callback.answer(t('subscription_not_found', user.language))
            return
        
        if subscription.is_trial:
            await callback.answer("‚ùå –¢–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–ª–∏—Ç—å")
            return
        
        if user.balance < subscription.price:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            return
        
        now = datetime.utcnow()
        
        if user_sub.expires_at > now:
            new_expiry = user_sub.expires_at + timedelta(days=subscription.duration_days)
        else:
            new_expiry = now + timedelta(days=subscription.duration_days)
        
        if api and user_sub.short_uuid:
            try:
                logger.info(f"Updating RemnaWave subscription for shortUuid: {user_sub.short_uuid}")
                
                remna_user_details = await api.get_user_by_short_uuid(user_sub.short_uuid)
                if remna_user_details:
                    user_uuid = remna_user_details.get('uuid')
                    if user_uuid:
                        expiry_str = new_expiry.isoformat() + 'Z'
                        
                        update_data = {
                            'enable': True,
                            'expireAt': expiry_str
                        }
                        
                        logger.info(f"Updating user {user_uuid} with new expiry: {expiry_str}")
                        
                        result = await api.update_user(user_uuid, update_data)
                        
                        if not result:
                            update_data['expiryTime'] = expiry_str
                            result = await api.update_user(user_uuid, update_data)
                        
                        if result:
                            logger.info(f"Successfully updated RemnaWave user expiry")
                        else:
                            logger.warning(f"Failed to update user in RemnaWave")
                            
                            if hasattr(api, 'update_user_expiry'):
                                result = await api.update_user_expiry(user_sub.short_uuid, expiry_str)
                                if result:
                                    logger.info(f"Successfully updated expiry using update_user_expiry method")
                    else:
                        logger.warning(f"Could not get user UUID from RemnaWave response")
                else:
                    logger.warning(f"Could not find user in RemnaWave with shortUuid: {user_sub.short_uuid}")
                    
            except Exception as e:
                logger.error(f"Failed to update expiry in RemnaWave: {e}")
        
        user_sub.expires_at = new_expiry
        user_sub.is_active = True
        await db.update_user_subscription(user_sub)
        
        user.balance -= subscription.price
        await db.update_user(user)
        
        payment = await db.create_payment(
            user_id=user.telegram_id,
            amount=-subscription.price, 
            payment_type='subscription_extend', 
            description=f'–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {subscription.name}',
            status='completed'
        )
        
        
        success_text = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\n"
        success_text += f"üìã –ü–æ–¥–ø–∏—Å–∫–∞: {subscription.name}\n"
        success_text += f"üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {format_datetime(new_expiry, user.language)}\n"
        success_text += f"üí∞ –°–ø–∏—Å–∞–Ω–æ: {subscription.price} —Ä—É–±.\n"
        success_text += f"üí≥ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {user.balance} —Ä—É–±."
        
        if api and user_sub.short_uuid:
            try:
                subscription_url = await api.get_subscription_url(user_sub.short_uuid)
                if subscription_url:
                    success_text += f"\n\nüîó <a href='{subscription_url}'>–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</a>"
                    success_text += f"\nüì± –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–∂–Ω—é—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ"
            except Exception as e:
                logger.warning(f"Could not get updated subscription URL: {e}")
        
        await callback.message.edit_text(
            success_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
        log_user_action(user.telegram_id, "subscription_extended", f"Sub: {subscription.name}")
        
    except Exception as e:
        logger.error(f"Error extending subscription: {e}")
        await callback.message.edit_text(
            t('error_occurred', user.language),
            reply_markup=main_menu_keyboard(user.language, user.is_admin)
        )

@router.callback_query(F.data.startswith("get_connection_"))
async def get_connection_callback(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    api = kwargs.get('api')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        user_subs = await db.get_user_subscriptions(user.telegram_id)
        
        sub_id = int(callback.data.split("_")[2])
        user_sub = next((s for s in user_subs if s.id == sub_id), None)
        if not user_sub:
            await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        if not user_sub.short_uuid:
            await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
        
        connection_url = None
        if api:
            try:
                connection_url = await api.get_subscription_url(user_sub.short_uuid)
                logger.info(f"Got subscription URL from API: {connection_url}")
            except Exception as e:
                logger.error(f"Failed to get URL from API: {e}")
        
        if not connection_url:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                reply_markup=back_keyboard("my_subscriptions", user.language)
            )
            return
        
        text = f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞!\n\n"
        text += f"üìã –ü–æ–¥–ø–∏—Å–∫–∞: {user_sub.id}\n"
        text += f"üîó –°—Å—ã–ª–∫–∞: <code>{connection_url}</code>\n\n"
        text += f"üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
        text += f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ\n"
        text += f"2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à–µ VPN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        text += f"3. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ\n\n"
        text += f"üí° –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", url=connection_url)],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="my_subscriptions")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error getting connection link: {e}")
        await callback.answer(t('error_occurred', user.language))

@router.callback_query(F.data == "support")
async def support_callback(callback: CallbackQuery, **kwargs):
    user = kwargs.get('user')
    config = kwargs.get('config')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    support_username = config.SUPPORT_USERNAME if config else 'support'
    
    text = t('support_message', user.language, support=support_username)
    await callback.message.edit_text(
        text,
        reply_markup=back_keyboard("main_menu", user.language)
    )

@router.callback_query(F.data == "promocode")
async def promocode_callback(callback: CallbackQuery, state: FSMContext, **kwargs):
    user = kwargs.get('user')
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    await state.clear()
    
    edited_message = await callback.message.edit_text(
        "üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:\n\n"
        "‚Ä¢ –û–±—ã—á–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã (—Å–∫–∏–¥–∫–∏)\n"
        "‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã (REF...)\n\n"
        "‚ÑπÔ∏è –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—ã –≤–µ—Ä–Ω–µ—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=cancel_keyboard(user.language)
    )
    
    await state.update_data(promocode_message_id=edited_message.message_id)
    await state.set_state(BotStates.waiting_promocode)

@router.message(StateFilter(BotStates.waiting_promocode))
async def handle_promocode(message: Message, state: FSMContext, db: Database, **kwargs):
    user = kwargs.get('user')
    config = kwargs.get('config')
    bot = kwargs.get('bot')
    
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await state.clear()
        return
    
    code = message.text.strip().upper()
    
    state_data = await state.get_data()
    promocode_message_id = state_data.get('promocode_message_id')
    
    if not validate_promocode_format(code):
        response_msg = await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞",
            reply_markup=main_menu_keyboard(user.language, user.is_admin)
        )
        
        if bot and promocode_message_id:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=promocode_message_id)
            except Exception as e:
                logger.warning(f"Could not delete promocode request message: {e}")
        
        await state.clear()
        return
    
    try:
        promocode = await db.get_promocode_by_code(code)
        
        if promocode and promocode.is_active:
            if promocode.expires_at and promocode.expires_at < datetime.utcnow():
                response_msg = await message.answer(
                    "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ–∫",
                    reply_markup=main_menu_keyboard(user.language, user.is_admin)
                )
                
                if bot and promocode_message_id:
                    try:
                        await bot.delete_message(chat_id=message.chat.id, message_id=promocode_message_id)
                    except:
                        pass
                        
                await state.clear()
                return
            
            if promocode.used_count >= promocode.usage_limit:
                response_msg = await message.answer(
                    "‚ùå –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω",
                    reply_markup=main_menu_keyboard(user.language, user.is_admin)
                )
                
                if bot and promocode_message_id:
                    try:
                        await bot.delete_message(chat_id=message.chat.id, message_id=promocode_message_id)
                    except:
                        pass
                        
                await state.clear()
                return
            
            success = await db.use_promocode(user.telegram_id, promocode)
            
            if not success:
                response_msg = await message.answer(
                    "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥",
                    reply_markup=main_menu_keyboard(user.language, user.is_admin)
                )
                
                if bot and promocode_message_id:
                    try:
                        await bot.delete_message(chat_id=message.chat.id, message_id=promocode_message_id)
                    except:
                        pass
                        
                await state.clear()
                return
            
            await db.add_balance(user.telegram_id, promocode.discount_amount)
            
            await db.create_payment(
                user_id=user.telegram_id,
                amount=promocode.discount_amount,
                payment_type='promocode',
                description=f'–ü—Ä–æ–º–æ–∫–æ–¥: {code}',
                status='completed'
            )
            
            discount_text = f"{promocode.discount_amount} —Ä—É–±."
            success_msg = await message.answer(
                t('promocode_success', user.language, discount=discount_text),
                reply_markup=main_menu_keyboard(user.language, user.is_admin)
            )
            
            if bot and promocode_message_id:
                try:
                    await bot.delete_message(chat_id=message.chat.id, message_id=promocode_message_id)
                    logger.info(f"Deleted promocode request message {promocode_message_id}")
                except Exception as e:
                    logger.warning(f"Could not delete promocode request message: {e}")
            
            await state.clear()
            log_user_action(user.telegram_id, "promocode_used", code)
            return
        
        if code.startswith("REF"):
            async with db.session_factory() as session:
                from sqlalchemy import select
                result = await session.execute(
                    select(ReferralProgram).where(ReferralProgram.referral_code == code)
                )
                referral_record = result.scalar_one_or_none()
                
                if referral_record:
                    referrer_id = referral_record.referrer_id
                    
                    existing_reverse_referral = await db.get_referral_by_referred_id(referrer_id)
                    if existing_reverse_referral and existing_reverse_referral.referrer_id == user.telegram_id:
                        response_msg = await message.answer(
                            "‚ùå –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏!\n\n"
                            "–í–∑–∞–∏–º–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è.",
                            reply_markup=main_menu_keyboard(user.language, user.is_admin)
                        )
                        
                        if bot and promocode_message_id:
                            try:
                                await bot.delete_message(chat_id=message.chat.id, message_id=promocode_message_id)
                            except:
                                pass
                                
                        await state.clear()
                        return
            
            success = await create_referral_from_promocode(user.telegram_id, code, db, bot)
            
            if success:
                threshold = config.REFERRAL_THRESHOLD if config else 300.0
                referred_bonus = config.REFERRAL_REFERRED_BONUS if config else 150.0
                
                success_msg = await message.answer(
                    f"üéâ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                    f"–ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {threshold:.0f}‚ÇΩ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å {referred_bonus:.0f}‚ÇΩ!",
                    reply_markup=main_menu_keyboard(user.language, user.is_admin)
                )
                
                if bot and promocode_message_id:
                    try:
                        await bot.delete_message(chat_id=message.chat.id, message_id=promocode_message_id)
                        logger.info(f"Deleted promocode request message {promocode_message_id}")
                    except Exception as e:
                        logger.warning(f"Could not delete promocode request message: {e}")
                
                await state.clear()
                log_user_action(user.telegram_id, "referral_code_used", code)
                return
            else:
                existing_referral = await db.get_referral_by_referred_id(user.telegram_id)
                if existing_referral:
                    error_text = "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥!"
                else:
                    error_text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥!"
                
                response_msg = await message.answer(
                    error_text,
                    reply_markup=main_menu_keyboard(user.language, user.is_admin)
                )
                
                if bot and promocode_message_id:
                    try:
                        await bot.delete_message(chat_id=message.chat.id, message_id=promocode_message_id)
                    except:
                        pass
                        
                await state.clear()
                return
        
        response_msg = await message.answer(
            "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard(user.language, user.is_admin)
        )
        
        if bot and promocode_message_id:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=promocode_message_id)
                logger.info(f"Deleted promocode request message {promocode_message_id}")
            except Exception as e:
                logger.warning(f"Could not delete promocode request message: {e}")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error handling promocode: {e}")
        response_msg = await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞",
            reply_markup=main_menu_keyboard(user.language, user.is_admin)
        )
        
        if bot and promocode_message_id:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=promocode_message_id)
            except:
                pass
                
        await state.clear()

@router.callback_query(F.data == "referral_program")
async def referral_program_callback(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    config = kwargs.get('config')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        stats = await db.get_user_referral_stats(user.telegram_id)
        
        referral_code = await get_or_create_referral_code(user.telegram_id, db)
        
        bot_username = config.BOT_USERNAME if config and config.BOT_USERNAME else ""
        referral_link = ""
        if bot_username:
            referral_link = f"https://t.me/{bot_username}?start=ref_{user.telegram_id}"
        
        from datetime import datetime
        current_time = datetime.now().strftime("%H:%M")
        
        text = "üéÅ **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞**\n\n"
        
        text += "**üìã –£—Å–ª–æ–≤–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:**\n"
        
        first_reward = config.REFERRAL_FIRST_REWARD if config else 150.0
        referred_bonus = config.REFERRAL_REFERRED_BONUS if config else 150.0
        threshold = config.REFERRAL_THRESHOLD if config else 300.0
        percentage = config.REFERRAL_PERCENTAGE if config else 0.25
        
        text += f"‚Ä¢ –ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ **{first_reward:.0f}‚ÇΩ** –Ω–∞ –±–∞–ª–∞–Ω—Å\n"
        text += f"‚Ä¢ –¢–≤–æ–π –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç **{referred_bonus:.0f}‚ÇΩ** –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ {threshold:.0f}‚ÇΩ\n"  
        text += f"‚Ä¢ –° –∫–∞–∂–¥–æ–≥–æ **–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞** –¥—Ä—É–≥–∞ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å **{percentage*100:.0f}%**\n\n"
        
        text += "**üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        text += f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {stats['total_referrals']} —á–µ–ª–æ–≤–µ–∫\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['active_referrals']}\n"
        text += f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: {stats['total_earned']:.2f}‚ÇΩ\n\n"
        
        if referral_link:
            text += "**üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**\n"
            text += f"`{referral_link}`\n\n"
        else:
            text += "‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_USERNAME)\n\n"
            
        text += f"**üé´ –¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥:** `{referral_code}`\n\n"
        text += "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥—Ä—É–∑—å—è–º!"
        
        text += f"\n\nüïê _–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}_"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="my_referrals")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="referral_program")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error showing referral program: {e}")
        try:
            await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", show_alert=False)
        except:
            pass

async def get_or_create_referral_code(user_id: int, db: Database) -> str:
    try:
        async with db.session_factory() as session:
            from sqlalchemy import select, text
            
            result = await session.execute(
                text("SELECT referral_code FROM referral_programs WHERE referrer_id = :user_id LIMIT 1"),
                {"user_id": user_id}
            )
            
            existing_code = result.scalar_one_or_none()
            
            if existing_code:
                logger.info(f"Found existing referral code {existing_code} for user {user_id}")
                return existing_code
        
        referral_code = await db.generate_unique_referral_code(user_id)
        
        referral = await db.create_referral(user_id, 0, referral_code)
        
        if referral:
            logger.info(f"Created new referral code {referral_code} for user {user_id}")
            return referral_code
        else:
            logger.warning(f"Failed to create referral code for user {user_id}")
            return f"REF{user_id}"
        
    except Exception as e:
        logger.error(f"Error getting/creating referral code for user {user_id}: {e}")
        return f"REF{user_id}"

@router.callback_query(F.data == "my_referrals")
async def my_referrals_callback(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    config = kwargs.get('config')  
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        referrals = await db.get_user_referrals(user.telegram_id)
        
        placeholder_id = 999999999 - user.telegram_id
        real_referrals = []
        
        for referral in referrals:
            if referral.referred_id == placeholder_id or referral.referred_id == 0:
                continue
                
            real_referrals.append(referral)
        
        if not real_referrals:
            text = "üë• –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n"
            text += "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!"
        else:
            text = f"üë• –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã ({len(real_referrals)}):\n\n"
            
            threshold = config.REFERRAL_THRESHOLD if config else 300.0
            
            for i, referral in enumerate(real_referrals[:10], 1): 
                referred_user = await db.get_user_by_telegram_id(referral.referred_id)
                
                if referred_user:
                    display_name = ""
                    if referred_user.first_name:
                        display_name = referred_user.first_name
                        if referred_user.last_name:
                            display_name += f" {referred_user.last_name}"
                    
                    if referred_user.username:
                        if display_name:
                            display_name += f" (@{referred_user.username})"
                        else:
                            display_name = f"@{referred_user.username}"
                    
                    if not display_name:
                        display_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{referred_user.telegram_id}"
                        
                else:
                    display_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:{referral.referred_id}"
                
                status_icon = "‚úÖ" if referral.first_reward_paid else "‚è≥"
                status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if referral.first_reward_paid else "–û–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
                
                earned_text = ""
                if referral.total_earned > 0:
                    earned_text = f" (+{referral.total_earned:.0f}‚ÇΩ)"
                
                text += f"{i}. {status_icon} {display_name}{earned_text}\n"
                text += f"   üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {format_date(referral.created_at)}\n"
                text += f"   üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
                
                if referral.first_reward_paid and referral.first_reward_at:
                    text += f"   üí∞ –ü–µ—Ä–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {format_date(referral.first_reward_at)}\n"
                elif not referral.first_reward_paid:
                    text += f"   ‚è≥ –ù—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ {threshold:.0f}‚ÇΩ\n"
                
                text += "\n"
            
            if len(real_referrals) > 10:
                text += f"... –∏ –µ—â–µ {len(real_referrals) - 10} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –ø—Ä–æ–≥—Ä–∞–º–º–µ", callback_data="referral_program")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing referrals: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

@router.callback_query(F.data == "service_rules")
async def service_rules_callback(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        rules = await db.get_all_service_rules(active_only=True)
        
        if not rules:
            await callback.message.edit_text(
                "üìú –ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return
        
        await show_rules_page(callback, rules, 0, user.language)
        
    except Exception as e:
        logger.error(f"Error showing service rules: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª")

async def show_rules_page(callback: CallbackQuery, rules: List[ServiceRule], page_index: int, lang: str = 'ru'):
    if page_index < 0 or page_index >= len(rules):
        page_index = 0
    
    rule = rules[page_index]
    total_pages = len(rules)
    
    safe_title = rule.title.replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')
    text = f"üìú **{safe_title}**\n\n"
    text += rule.content
    
    if total_pages > 1:
        text += f"\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_index + 1} –∏–∑ {total_pages}"
    
    if len(text) > 4000:
        text = text[:3950] + "\n\n... (—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)"
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=service_rules_keyboard(page_index, total_pages, lang),
            parse_mode='Markdown'
        )
    except Exception as markdown_error:
        logger.warning(f"Markdown parsing failed in user rules, retrying without markdown: {markdown_error}")
        try:
            clean_text = text.replace('**', '').replace('*', '').replace('_', '').replace('`', '')
            await callback.message.edit_text(
                clean_text,
                reply_markup=service_rules_keyboard(page_index, total_pages, lang)
            )
        except Exception as edit_error:
            await callback.message.answer(
                clean_text,
                reply_markup=service_rules_keyboard(page_index, total_pages, lang)
            )

@router.callback_query(F.data.startswith("rules_page_"))
async def rules_page_callback(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        page_index = int(callback.data.split("_")[-1])
        rules = await db.get_all_service_rules(active_only=True)
        
        if not rules:
            await callback.answer("‚ùå –ü—Ä–∞–≤–∏–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        await show_rules_page(callback, rules, page_index, user.language)
        
    except (ValueError, IndexError) as e:
        logger.error(f"Error parsing rules page number: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    except Exception as e:
        logger.error(f"Error switching rules page: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

@router.callback_query(F.data == "cancel", StateFilter(BotStates.waiting_promocode))
async def cancel_promocode_callback(callback: CallbackQuery, state: FSMContext, **kwargs):
    user = kwargs.get('user')
    config = kwargs.get('config')
    db = kwargs.get('db')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    await state.clear()
    
    show_trial = False
    show_lucky_game = True
    
    if config and config.TRIAL_ENABLED and db:
        try:
            has_used = await db.has_used_trial(user.telegram_id)
            show_trial = not has_used
        except Exception as e:
            logger.error(f"Error checking trial availability: {e}")
    
    if config:
        show_lucky_game = getattr(config, 'LUCKY_GAME_ENABLED', True)
    
    await callback.message.edit_text(
        t('main_menu', user.language),
        reply_markup=main_menu_keyboard(user.language, user.is_admin, show_trial, show_lucky_game)
    )

@router.callback_query(F.data.startswith("toggle_autopay_"))
async def toggle_autopay_callback(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        user_sub_id = int(callback.data.split("_")[2])
        
        user_subs = await db.get_user_subscriptions(user.telegram_id)
        user_sub = next((sub for sub in user_subs if sub.id == user_sub_id), None)
        
        if not user_sub:
            await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        subscription = await db.get_subscription_by_id(user_sub.subscription_id)
        if not subscription:
            await callback.answer("‚ùå –ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if subscription.is_trial:
            await callback.answer("‚ùå –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            return
        
        if subscription.is_imported or subscription.price == 0:
            await callback.answer("‚ùå –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            return
        
        new_state = not user_sub.auto_pay_enabled
        success = await db.toggle_autopay(user_sub_id, new_state)
        
        if success:
            status_text = "–≤–∫–ª—é—á–µ–Ω" if new_state else "–æ—Ç–∫–ª—é—á–µ–Ω"
            await callback.answer(f"‚úÖ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ {status_text}")
            
            updated_subs = await db.get_user_subscriptions(user.telegram_id)
            updated_sub = next((sub for sub in updated_subs if sub.id == user_sub_id), None)
            
            if updated_sub:
                await autopay_settings_callback(callback, db, user=user)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
    except Exception as e:
        logger.error(f"Error toggling autopay: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")

@router.callback_query(F.data == "autopay_help")
async def autopay_help_callback(callback: CallbackQuery, **kwargs):
    user = kwargs.get('user')
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    text = "üîÑ **–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ - –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**\n\n"
    
    text += "**üéØ –ß—Ç–æ —Ç–∞–∫–æ–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂:**\n"
    text += "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è.\n\n"
    
    text += "**‚öôÔ∏è –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:**\n"
    text += "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'\n"
    text += "2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É\n"
    text += "3. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂'\n"
    text += "4. –í–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å\n\n"
    
    text += "**üí∞ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
    text += "‚Ä¢ –ù–∞ –±–∞–ª–∞–Ω—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n"
    text += "‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π\n"
    text += "‚Ä¢ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –æ–±—ã—á–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n\n"
    
    text += "**üìÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è:**\n"
    text += "‚Ä¢ –ó–∞ 1 –¥–µ–Ω—å - –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Å–ª–µ–¥–∏—Ç –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º\n"
    text += "‚Ä¢ –ó–∞ 3 –¥–Ω—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
    text += "‚Ä¢ –ó–∞ 5 –¥–Ω–µ–π - –¥–ª—è –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏\n"
    text += "‚Ä¢ –ó–∞ 7 –¥–Ω–µ–π - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –≤—Ä–µ–º–µ–Ω–∏\n\n"
    
    text += "**üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n"
    text += "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n\n"
    
    text += "**‚ùì –ü—Ä–æ–±–ª–µ–º—ã:**\n"
    text += "–ï—Å–ª–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    
    await callback.message.edit_text(
        text,
        reply_markup=autopay_help_keyboard(user.language),
        parse_mode='Markdown'
    )

@router.callback_query(F.data == "autopay_insufficient_balance_help")
async def autopay_insufficient_balance_help_callback(callback: CallbackQuery, **kwargs):
    user = kwargs.get('user')
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    text = "‚ö†Ô∏è **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞**\n\n"
    
    text += f"üí≥ **–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** {user.balance}‚ÇΩ\n\n"
    
    text += "**üîÑ –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:**\n"
    text += "–°–∏—Å—Ç–µ–º–∞ –ø—ã—Ç–∞–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É, –Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n\n"
    
    text += "**‚úÖ –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
    text += "1. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ –Ω—É–∂–Ω—É—é —Å—É–º–º—É\n"
    text += "2. –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –ø–æ–ø—Ä–æ–±—É–µ—Ç —Å–Ω–æ–≤–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ\n"
    text += "3. –ò–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é\n\n"
    
    text += "**‚è∞ –í–∞–∂–Ω–æ:**\n"
    text += "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –∏–Ω–∞—á–µ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    
    await callback.message.edit_text(
        text,
        reply_markup=autopay_help_keyboard(user.language),
        parse_mode='Markdown'
    )

@router.callback_query(F.data.startswith("autopay_settings_"))
async def autopay_settings_callback(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        user_sub_id = int(callback.data.split("_")[2])
        
        user_subs = await db.get_user_subscriptions(user.telegram_id)
        user_sub = next((sub for sub in user_subs if sub.id == user_sub_id), None)
        
        if not user_sub:
            await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        subscription = await db.get_subscription_by_id(user_sub.subscription_id)
        if not subscription:
            await callback.answer("‚ùå –ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if subscription.is_trial:
            await callback.answer("‚ùå –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            return
        
        if subscription.is_imported or subscription.price == 0:
            await callback.answer("‚ùå –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            return
        
        from datetime import datetime
        now = datetime.utcnow()
        days_left = (user_sub.expires_at - now).days
        
        text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞\n\n"
        text += f"üìã –ü–æ–¥–ø–∏—Å–∫–∞: {subscription.name}\n"
        text += f"üí∞ –¶–µ–Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {subscription.price} —Ä—É–±.\n"
        text += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {subscription.duration_days} –¥–Ω.\n"
        text += f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {days_left} –¥–Ω.\n\n"
        
        status_emoji = "‚úÖ" if user_sub.auto_pay_enabled else "‚ùå"
        status_text = "–í–∫–ª—é—á–µ–Ω" if user_sub.auto_pay_enabled else "–û—Ç–∫–ª—é—á–µ–Ω"
        text += f"üîÑ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂: {status_emoji} {status_text}\n"
        
        if user_sub.auto_pay_enabled:
            text += f"üìÖ –ü—Ä–æ–¥–ª—è—Ç—å –∑–∞: {user_sub.auto_pay_days_before} –¥–Ω. –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è\n\n"
            
            if user.balance >= subscription.price:
                text += f"‚úÖ –ù–∞ –±–∞–ª–∞–Ω—Å–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ({user.balance}‚ÇΩ)\n"
                text += f"üí° –ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞"
            else:
                needed = subscription.price - user.balance
                text += f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n"
                text += f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ\n"
                text += f"üí∏ –ù—É–∂–Ω–æ –µ—â–µ: {needed}‚ÇΩ\n"
                text += f"üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è"
        else:
            text += f"\nüí° –í–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏\n"
            text += f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∫–ª—é—á–∏—Ç—å –∑–∞ 3 –¥–Ω—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è"
        
        await callback.message.edit_text(
            text,
            reply_markup=autopay_settings_keyboard(user_sub_id, user_sub, user.language)
        )
        
    except Exception as e:
        logger.error(f"Error showing autopay settings: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data.startswith("autopay_days_"))
async def autopay_days_callback(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        parts = callback.data.split("_")
        user_sub_id = int(parts[2])
        days = int(parts[3])
        
        user_subs = await db.get_user_subscriptions(user.telegram_id)
        user_sub = next((sub for sub in user_subs if sub.id == user_sub_id), None)
        
        if not user_sub:
            await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        success = await db.set_autopay_days(user_sub_id, days)
        
        if success:
            await callback.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –ø—Ä–æ–¥–ª—è—Ç—å –∑–∞ {days} –¥–Ω.")
            
            updated_subs = await db.get_user_subscriptions(user.telegram_id)
            updated_sub = next((sub for sub in updated_subs if sub.id == user_sub_id), None)
            
            if updated_sub:
                await autopay_settings_callback(callback, db, user=user)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
    except Exception as e:
        logger.error(f"Error setting autopay days: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
