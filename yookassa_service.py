import asyncio
import logging
import hashlib
import hmac
import json
import base64
import urllib.request
from typing import Dict, Optional, List
from datetime import datetime, timedelta
from dataclasses import dataclass
from yookassa import Configuration, Payment
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives.serialization import load_pem_public_key, load_der_public_key
from cryptography import x509

logger = logging.getLogger(__name__)

@dataclass
class YooKassaPaymentData:
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa"""
    amount: float
    currency: str = "RUB"
    description: str = ""
    payment_method_types: Optional[List[str]] = None
    receipt_items: Optional[List[Dict]] = None
    payment_metadata: Optional[Dict] = None

class YooKassaService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YooKassa API"""
    
    def __init__(self, shop_id: str, secret_key: str):
        self.shop_id = shop_id
        self.secret_key = secret_key
        self._yk_public_keys: Dict[str, object] = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YooKassa
        Configuration.account_id = shop_id
        Configuration.secret_key = secret_key
        
        logger.info(f"‚úÖ YooKassa service initialized for shop: {shop_id}")

    def _get_yk_public_key(self, key_id: str):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á YooKassa –ø–æ key_id —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        if key_id in self._yk_public_keys:
            return self._yk_public_keys[key_id]
        try:
            url = f"https://yookassa.ru/signature/key/{key_id}"
            with urllib.request.urlopen(url, timeout=5) as resp:
                content = resp.read()
            try:
                preview = content[:64]
                logger.info(f"üîë Downloaded key {key_id}: {len(content)} bytes, head={preview!r}")
            except Exception:
                pass
            # 1) –ü–æ–ø—ã—Ç–∫–∞: PEM —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            try:
                cert = x509.load_pem_x509_certificate(content)
                public_key = cert.public_key()
                self._yk_public_keys[key_id] = public_key
                return public_key
            except Exception:
                pass
            # 2) –ü–æ–ø—ã—Ç–∫–∞: PEM –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
            try:
                public_key = load_pem_public_key(content)
                self._yk_public_keys[key_id] = public_key
                return public_key
            except Exception:
                pass
            # 3) –ü–æ–ø—ã—Ç–∫–∞: DER —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (—Å—ã—Ä—ã–µ –±–∞–π—Ç—ã)
            try:
                cert = x509.load_der_x509_certificate(content)
                public_key = cert.public_key()
                self._yk_public_keys[key_id] = public_key
                return public_key
            except Exception:
                pass
            # 4) –ü–æ–ø—ã—Ç–∫–∞: DER –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á (—Å—ã—Ä—ã–µ –±–∞–π—Ç—ã)
            try:
                public_key = load_der_public_key(content)
                self._yk_public_keys[key_id] = public_key
                return public_key
            except Exception:
                pass
            # 5) –ü–æ–ø—ã—Ç–∫–∞: base64 -> DER —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            try:
                der = base64.b64decode(content)
                cert = x509.load_der_x509_certificate(der)
                public_key = cert.public_key()
                self._yk_public_keys[key_id] = public_key
                return public_key
            except Exception:
                pass
            # 6) –ü–æ–ø—ã—Ç–∫–∞: base64 -> DER –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
            try:
                der = base64.b64decode(content)
                public_key = load_der_public_key(der)
                self._yk_public_keys[key_id] = public_key
                return public_key
            except Exception:
                pass
            raise ValueError("Unrecognized public key format")
        except Exception as e:
            logger.error(f"‚ùå Failed to fetch YooKassa public key for {key_id}: {e}")
            return None

    async def create_payment(self, payment_data: YooKassaPaymentData, return_url: str = None) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ YooKassa
        
        Args:
            payment_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
            return_url: URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–ª–∞—Ç–µ–∂–∞
            payment_request = {
                "amount": {
                    "value": str(payment_data.amount),
                    "currency": "RUB"
                },
                "description": payment_data.description,
                "confirmation": {
                    "type": "redirect",
                    "return_url": return_url or "https://t.me/your_bot_username"
                },
                "capture": True,
                "metadata": payment_data.payment_metadata or {}
            }
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API
            logger.info(f"üîç Creating payment with request: {payment_request}")
            payment = Payment.create(payment_request)
            
            logger.info(f"‚úÖ Payment created successfully: {getattr(payment, 'id', 'N/A')}")
            logger.info(f"üîç Payment object type: {type(payment)}")
            logger.info(f"üîç Payment attributes: {dir(payment)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            payment_id = getattr(payment, 'id', None)
            payment_status = getattr(payment, 'status', None)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É–º–º—É
            amount_value = 0.0
            currency = "RUB"
            if hasattr(payment, 'amount'):
                if isinstance(payment.amount, dict):
                    amount_value = float(payment.amount.get('value', 0))
                    currency = payment.amount.get('currency', 'RUB')
                else:
                    amount_value = float(getattr(payment.amount, 'value', 0))
                    currency = getattr(payment.amount, 'currency', 'RUB')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirmation_url = None
            logger.info(f"üîç Processing confirmation: hasattr={hasattr(payment, 'confirmation')}")
            if hasattr(payment, 'confirmation'):
                logger.info(f"üîç Confirmation type: {type(payment.confirmation)}")
                logger.info(f"üîç Confirmation value: {payment.confirmation}")
                if isinstance(payment.confirmation, dict):
                    confirmation_url = payment.confirmation.get('return_url')
                    logger.info(f"üîç Confirmation from dict: {confirmation_url}")
                else:
                    confirmation_url = getattr(payment.confirmation, 'confirmation_url', None)
                    logger.info(f"üîç Confirmation from object: {confirmation_url}")
            logger.info(f"üîç Final confirmation_url: {confirmation_url}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            created_at = None
            if hasattr(payment, 'created_at') and payment.created_at:
                if hasattr(payment.created_at, 'isoformat'):
                    created_at = payment.created_at.isoformat()
                else:
                    created_at = str(payment.created_at)
            
            return {
                'id': payment_id,
                'status': payment_status,
                'amount': amount_value,
                'currency': currency,
                'confirmation_url': confirmation_url,
                'created_at': created_at,
                'description': getattr(payment, 'description', ''),
                'payment_metadata': getattr(payment, 'metadata', {})
            }
            
        except Exception as e:
            logger.error(f"‚ùå Failed to create payment: {e}")
            raise
    
    async def get_payment_status(self, payment_id: str) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            payment = Payment.find_one(payment_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            payment_id = getattr(payment, 'id', None)
            payment_status = getattr(payment, 'status', None)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É–º–º—É
            amount_value = 0.0
            currency = "RUB"
            if hasattr(payment, 'amount'):
                if isinstance(payment.amount, dict):
                    amount_value = float(payment.amount.get('value', 0))
                    currency = payment.amount.get('currency', 'RUB')
                else:
                    amount_value = float(getattr(payment.amount, 'value', 0))
                    currency = getattr(payment.amount, 'currency', 'RUB')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É
            amount_paid_value = 0.0
            if hasattr(payment, 'amount_paid'):
                if isinstance(payment.amount_paid, dict):
                    amount_paid_value = float(payment.amount_paid.get('value', 0))
                else:
                    amount_paid_value = float(getattr(payment.amount_paid, 'value', 0))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã
            created_at = None
            captured_at = None
            if hasattr(payment, 'created_at') and payment.created_at:
                if hasattr(payment.created_at, 'isoformat'):
                    created_at = payment.created_at.isoformat()
                else:
                    created_at = str(payment.created_at)
            
            if hasattr(payment, 'captured_at') and payment.captured_at:
                if hasattr(payment.captured_at, 'isoformat'):
                    captured_at = payment.captured_at.isoformat()
                else:
                    captured_at = str(payment.captured_at)
            
            return {
                'id': payment_id,
                'status': payment_status,
                'amount': amount_value,
                'currency': currency,
                'paid': getattr(payment, 'paid', False),
                'amount_paid': amount_paid_value,
                'created_at': created_at,
                'captured_at': captured_at,
                'description': getattr(payment, 'description', ''),
                'payment_metadata': getattr(payment, 'metadata', {})
            }
            
        except Exception as e:
            logger.error(f"‚ùå Failed to get payment status: {e}")
            raise
    
    async def cancel_payment(self, payment_id: str) -> bool:
        """
        –û—Ç–º–µ–Ω—è–µ—Ç –ø–ª–∞—Ç–µ–∂
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa
            
        Returns:
            True –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω
        """
        try:
            # –û—Ç–º–µ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
            Payment.cancel(payment_id)
            logger.info(f"‚úÖ Payment {payment_id} cancelled successfully")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to cancel payment {payment_id}: {e}")
            return False
    
    def verify_webhook_signature(self, body: str, signature: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å webhook'–∞ –æ—Ç YooKassa (—Ñ–æ—Ä–º–∞—Ç v1 –ø–æ –ø—É–±–ª–∏—á–Ω–æ–º—É –∫–ª—é—á—É). 
        –ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞ –∏–ª–∏ –æ—à–∏–±–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ‚Äî –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É.
        """
        try:
            logger.info(f"üîç Webhook signature verification:")
            logger.info(f"üîç Received signature: {signature}")

            if signature and signature.startswith('v1 '):
                parts = signature.split(' ')
                if len(parts) < 4:
                    logger.debug("Invalid v1 signature format; allowing webhook")
                    return True
                key_id = parts[1]
                sig_b64 = parts[3]
                try:
                    sig_bytes = base64.b64decode(sig_b64)
                except Exception as e:
                    logger.debug(f"Cannot decode base64 signature: {e}; allowing webhook")
                    return True
                public_key = self._get_yk_public_key(key_id)
                if public_key:
                    try:
                        public_key.verify(
                            sig_bytes,
                            body.encode('utf-8'),
                            padding.PKCS1v15(),
                            hashes.SHA256()
                        )
                        logger.info("üîç Signature verification result: True (RSA)")
                        return True
                    except Exception as e:
                        logger.debug(f"RSA signature verification failed: {e}; allowing webhook")
                        return True
                else:
                    logger.debug("Public key not available; allowing webhook")
                    return True

            logger.debug("Unknown or missing signature; allowing webhook")
            return True
        except Exception as e:
            logger.error(f"‚ùå Error verifying webhook signature: {e}")
            return True
    
    def parse_webhook_data(self, body: str) -> Optional[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ webhook'–∞ –æ—Ç YooKassa
        
        Args:
            body: –¢–µ–ª–æ webhook –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ webhook'–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            data = json.loads(body)
            logger.info(f"üîç Parsing webhook data: {data}")
            
            # YooKassa –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'event' –≤–º–µ—Å—Ç–æ 'type' –∏ 'object' –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
            if 'object' not in data:
                logger.error("‚ùå Invalid webhook data structure: missing 'object'")
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            event_type = data.get('event', data.get('type', 'unknown'))
            payment_data = data['object']
            
            logger.info(f"üîç Webhook event type: {event_type}")
            logger.info(f"üîç Payment data: {payment_data}")
            
            if event_type == 'payment.succeeded':
                return {
                    'type': 'payment_succeeded',
                    'payment_id': payment_data.get('id'),
                    'status': payment_data.get('status'),
                    'amount': float(payment_data.get('amount', {}).get('value', 0)),
                    'currency': payment_data.get('amount', {}).get('currency'),
                    'paid': payment_data.get('paid', False),
                    'metadata': payment_data.get('metadata', {}),
                    'captured_at': payment_data.get('captured_at')
                }
            
            elif event_type == 'payment.canceled':
                return {
                    'type': 'payment_canceled',
                    'payment_id': payment_data.get('id'),
                    'status': payment_data.get('status'),
                    'metadata': payment_data.get('metadata', {})
                }
            
            elif event_type == 'payment.waiting_for_capture':
                return {
                    'type': 'payment_waiting_for_capture',
                    'payment_id': payment_data.get('id'),
                    'status': payment_data.get('status'),
                    'amount': float(payment_data.get('amount', {}).get('value', 0)),
                    'currency': payment_data.get('amount', {}).get('currency'),
                    'metadata': payment_data.get('metadata', {})
                }
            
            else:
                logger.info(f"‚ÑπÔ∏è Unhandled webhook event type: {event_type}")
                return None
                
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Failed to parse webhook JSON: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå Error parsing webhook data: {e}")
            return None
    
    async def get_payment_methods_info(self) -> List[Dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–∞—Ö –æ–ø–ª–∞—Ç—ã
        
        Returns:
            List —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
        """
        methods = [
            {
                'id': 'bank_card',
                'name': '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
                'description': 'Visa, MasterCard, –ú–ò–†',
                'icon': 'üí≥',
                'enabled': True
            },
            {
                'id': 'sbp',
                'name': '–°–ë–ü',
                'description': '–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π',
                'icon': 'üè¶',
                'enabled': True
            },
            {
                'id': 'yoo_money',
                'name': '–ÆMoney',
                'description': '–ö–æ—à–µ–ª–µ–∫ –ÆMoney',
                'icon': 'üí∞',
                'enabled': True
            },
            {
                'id': 'cash',
                'name': '–ù–∞–ª–∏—á–Ω—ã–µ',
                'description': '–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏',
                'icon': 'üíµ',
                'enabled': True
            }
        ]
        
        return methods
