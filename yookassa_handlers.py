from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime
import logging
from typing import Dict

from database import Database, User
from keyboards import balance_keyboard, topup_keyboard, cancel_keyboard, yookassa_payment_link_keyboard
from translations import t
from utils import log_user_action
from yookassa_service import YooKassaService, YooKassaPaymentData
from referral_utils import process_referral_rewards

logger = logging.getLogger(__name__)

yookassa_router = Router()

class YooKassaTopupStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ YooKassa"""
    waiting_for_amount = State()

@yookassa_router.callback_query(F.data == "cancel")
async def cancel_yookassa_callback(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –¥–ª—è YooKassa"""
    user = kwargs.get('user')
    
    logger.info(f"üîç cancel_yookassa_callback: user={user is not None}")
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞
    await callback.message.edit_text(
        t('balance', user.language),
        reply_markup=balance_keyboard(user.language)
    )

@yookassa_router.callback_query(F.data == "topup_yookassa")
async def topup_yookassa_callback(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ YooKassa"""
    user = kwargs.get('user')
    config = kwargs.get('config')
    
    logger.info(f"üîç topup_yookassa_callback: user={user is not None}, config={config is not None}")
    if config:
        logger.info(f"üîç topup_yookassa_callback: YOOKASSA_ENABLED={config.YOOKASSA_ENABLED}")
        logger.info(f"üîç topup_yookassa_callback: YOOKASSA_SHOP_ID={'SET' if config.YOOKASSA_SHOP_ID else 'NOT SET'}")
        logger.info(f"üîç topup_yookassa_callback: YOOKASSA_SECRET_KEY={'SET' if config.YOOKASSA_SECRET_KEY else 'NOT SET'}")
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    if not config or not config.YOOKASSA_ENABLED:
        await callback.message.edit_text(
            "‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ YooKassa –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            reply_markup=balance_keyboard(user.language)
        )
        return
    
    if not config.YOOKASSA_SHOP_ID or not config.YOOKASSA_SECRET_KEY:
        await callback.message.edit_text(
            "‚ùå –°–µ—Ä–≤–∏—Å YooKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
            reply_markup=balance_keyboard(user.language)
        )
        return
    
    text = "üí≥ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ YooKassa**\n\n"
    text += "üöÄ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**\n"
    text += "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏\n"
    text += "‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã\n"
    text += "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ\n"
    text += "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤\n\n"
    
    text += "üíé **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**\n"
    text += "‚Ä¢ üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã (Visa, MasterCard, –ú–ò–†)\n"
    text += "‚Ä¢ üè¶ –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)\n"
    text += "‚Ä¢ üí∞ –ÆMoney –∫–æ—à–µ–ª–µ–∫\n"
    text += "‚Ä¢ üíµ –ù–∞–ª–∏—á–Ω—ã–µ\n\n"
    
    text += "üí∞ **–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—Ä—É–±.):**"
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã
    await state.set_state(YooKassaTopupStates.waiting_for_amount)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã
    await callback.message.edit_text(
        text,
        reply_markup=cancel_keyboard(user.language),
        parse_mode='Markdown'
    )

@yookassa_router.message(YooKassaTopupStates.waiting_for_amount)
async def process_yookassa_amount(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –¥–ª—è YooKassa"""
    user = kwargs.get('user')
    config = kwargs.get('config')
    db = kwargs.get('db')
    
    logger.info(f"üîç process_yookassa_amount: user={user is not None}, config={config is not None}, db={db is not None}")
    logger.info(f"üîç process_yookassa_amount: message.text='{message.text}'")
    
    if not user or not config or not db:
        logger.error(f"‚ùå process_yookassa_amount: Missing required data - user={user is not None}, config={config is not None}, db={db is not None}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        amount = float(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if amount < 1:
            await message.answer(t('yookassa_min_amount', user.language))
            return
        
        if amount > 75000:
            await message.answer(t('yookassa_max_amount', user.language))
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ YooKassa
        await message.answer(t('yookassa_processing_payment', user.language))
        
        yookassa_service = YooKassaService(
            shop_id=config.YOOKASSA_SHOP_ID,
            secret_key=config.YOOKASSA_SECRET_KEY
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
        payment_data = YooKassaPaymentData(
            amount=amount,
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount:.2f}‚ÇΩ",
            payment_metadata={
                'user_id': user.telegram_id,
                'username': user.username,
                'payment_type': 'balance_topup'
            }
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_result = await yookassa_service.create_payment(
            payment_data,
            return_url=f"https://t.me/{config.BOT_USERNAME}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_payment = await db.create_yookassa_payment(
            user_id=user.telegram_id,
            yookassa_payment_id=payment_result['id'],
            amount=amount,
            description=payment_data.description,
            confirmation_url=payment_result.get('confirmation_url'),
            payment_metadata=payment_data.payment_metadata
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
        text = f"‚úÖ **{t('yookassa_payment_created', user.language)}**\n\n"
        text += f"üí∞ **–°—É–º–º–∞:** {amount:.2f}‚ÇΩ\n"
        text += f"üÜî **ID –ø–ª–∞—Ç–µ–∂–∞:** `{payment_result['id']}`\n"
        text += f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        
        if payment_result.get('confirmation_url'):
            text += f"üîó **{t('yookassa_payment_link', user.language)}:**\n"
            text += f"`{payment_result['confirmation_url']}`\n\n"
            text += "üí° **–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã**\n\n"
        else:
            text += "‚ö†Ô∏è **–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞**\n\n"
        
        text += "üìä **–°—Ç–∞—Ç—É—Å:** " + t('yookassa_payment_pending', user.language)
        
        await message.answer(
            text,
            reply_markup=(yookassa_payment_link_keyboard(payment_result['confirmation_url'], user.language) if payment_result.get('confirmation_url') else balance_keyboard(user.language)),
            parse_mode='Markdown'
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        log_user_action(
            user_id=user.telegram_id,
            action="yookassa_payment_created",
            details=f"amount={amount}, payment_id={payment_result['id']}"
        )
        
        logger.info(f"‚úÖ YooKassa payment flow completed successfully for user {user.telegram_id}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except ValueError:
        await message.answer(
            t('yookassa_invalid_amount', user.language),
            reply_markup=cancel_keyboard(user.language)
        )
    except Exception as e:
        logger.error(f"Error creating YooKassa payment: {e}")
        logger.error(f"Error type: {type(e)}")
        logger.error(f"Error details: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        await message.answer(
            t('yookassa_payment_error', user.language),
            reply_markup=cancel_keyboard(user.language)
        )
        await state.clear()

@yookassa_router.callback_query(F.data == "yookassa_payment_status")
async def yookassa_payment_status_callback(callback: CallbackQuery, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ YooKassa"""
    user = kwargs.get('user')
    config = kwargs.get('config')
    db = kwargs.get('db')
    
    if not user or not config or not db:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    payments = await db.get_user_yookassa_payments(user.telegram_id, limit=5)
    
    if not payments:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ YooKassa")
        return
    
    text = "üìä **–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π YooKassa:**\n\n"
    
    for payment in payments:
        status_emoji = {
            'pending': '‚è≥',
            'succeeded': '‚úÖ',
            'canceled': '‚ùå',
            'waiting_for_capture': '‚è∏Ô∏è'
        }.get(payment.status, '‚ùì')
        
        status_text = {
            'pending': t('yookassa_payment_pending', user.language),
            'succeeded': t('yookassa_payment_success', user.language),
            'canceled': t('yookassa_payment_cancelled', user.language),
            'waiting_for_capture': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
        }.get(payment.status, payment.status)
        
        created_date = payment.created_at.strftime('%d.%m.%Y %H:%M')
        text += f"{status_emoji} **{created_date}** - {payment.amount:.2f}‚ÇΩ\n"
        text += f"   üìä {status_text}\n"
        text += f"   üÜî `{payment.yookassa_payment_id}`\n\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=balance_keyboard(user.language),
        parse_mode='Markdown'
    )

async def process_yookassa_webhook(webhook_data: Dict, db: Database, bot=None) -> bool:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–∞ –æ—Ç YooKassa
    
    Args:
        webhook_data: –î–∞–Ω–Ω—ã–µ webhook'–∞
        db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
    Returns:
        True –µ—Å–ª–∏ webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ
    """
    try:
        webhook_type = webhook_data.get('type')
        payment_id = webhook_data.get('payment_id')
        
        if not payment_id:
            logger.error("‚ùå Webhook without payment_id")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        payment = await db.get_yookassa_payment_by_yookassa_id(payment_id)
        if not payment:
            logger.error(f"‚ùå Payment {payment_id} not found in database")
            return False
        
        if webhook_type == 'payment_succeeded':
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
            await db.update_yookassa_payment_status(
                payment.id, 
                'succeeded',
                completed_at=datetime.utcnow()
            )
            
            # –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.add_balance(payment.user_id, payment.amount)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
            await db.create_payment(
                user_id=payment.user_id,
                amount=payment.amount,
                payment_type='yookassa',
                description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ YooKassa (ID: {payment_id})",
                status='completed'
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
            await process_referral_rewards(
                user_id=payment.user_id,
                amount=payment.amount,
                payment_id=payment.id,
                db=db,
                bot=bot,
                payment_type='yookassa'
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if bot:
                try:
                    await bot.send_message(
                        payment.user_id,
                        f"‚úÖ **{t('yookassa_payment_success', 'ru')}**\n\n"
                        f"üí∞ **–°—É–º–º–∞:** {payment.amount:.2f}‚ÇΩ\n"
                        f"üí≥ **–°–ø–æ—Å–æ–±:** YooKassa\n"
                        f"üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                        f"üéâ **–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!**",
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"Failed to notify user {payment.user_id}: {e}")
            
            logger.info(f"‚úÖ Payment {payment_id} processed successfully")
            
        elif webhook_type == 'payment_canceled':
            # –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω
            await db.update_yookassa_payment_status(
                payment.id, 
                'canceled',
                cancelled_at=datetime.utcnow()
            )
            
            logger.info(f"‚ùå Payment {payment_id} cancelled")
            
        elif webhook_type == 'payment_waiting_for_capture':
            # –ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await db.update_yookassa_payment_status(payment.id, 'waiting_for_capture')
            logger.info(f"‚è∏Ô∏è Payment {payment_id} waiting for capture")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error processing YooKassa webhook: {e}")
        return False
